name: Build, Test, and Deploy Backend to Elastic Beanstalk

on:
  push:
    branches:
      - main

env:
  PYTHON_VERSION: "3.11"
  # Define the test database URL here for the test job
  TEST_DATABASE_URL: postgresql://testuser:testpassword@localhost:5433/testdb

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Start test database
        run: docker-compose -f docker-compose.test.yml up -d

      - name: Lint with black and flake8
        run: |
          black --check .
          flake8 --max-line-length=88 --ignore=E501,E203,W503 --exclude=env .

      - name: Run tests with coverage
        # The DATABASE_URL env var is set here, pointing to the Docker container
        env:
          DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
        run: |
          # Apply migrations to the fresh test database before running tests
          alembic upgrade head
          coverage run --source='.' -m pytest
          coverage report -m

      - name: Stop test database
        # This step will run even if the tests fail, ensuring cleanup
        if: always()
        run: docker-compose -f docker-compose.test.yml down

      - name: Create ZIP file for deployment
        run: zip -r deploy.zip . -x ".git/*" "env/*" "*__pycache__/*" ".DS_Store" "tests/*" "docker-compose.test.yml"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload package to S3 bucket
        run: aws s3 cp deploy.zip s3://${{ secrets.EB_S3_BUCKET_NAME }}/deploy-${{ github.sha }}.zip

      - name: Create new Elastic Beanstalk version
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name ${{ secrets.EB_APP_NAME }} \
            --version-label "ver-${{ github.sha }}" \
            --source-bundle S3Bucket="${{ secrets.EB_S3_BUCKET_NAME }}",S3Key="deploy-${{ github.sha }}.zip"

      - name: Deploy new version and wait for completion
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name ${{ secrets.EB_ENV_NAME }} \
            --version-label "ver-${{ github.sha }}"
          
          echo "Deployment initiated. Waiting for environment to become Ready..."
          aws elasticbeanstalk wait environment-updated --environment-name ${{ secrets.EB_ENV_NAME }}
          echo "Environment update complete."

      - name: Upload coverage report to Coveralls
        if: success() # Only run if tests succeed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: coveralls --service=github 